// <auto-generated />
using System;
using DAL.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20240711101309_addStartData")]
    partial class addStartData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Entities.OperationTypeEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("operationTypes", (string)null);

                    b.HasData(
                        new
                        {
                            ID = new Guid("551e0ac4-8fba-4342-ab69-9a74c33f8639"),
                            IsIncome = true,
                            Name = "income"
                        },
                        new
                        {
                            ID = new Guid("3eab599a-ff06-4818-828e-42d49f12405a"),
                            IsIncome = false,
                            Name = "expenses"
                        });
                });

            modelBuilder.Entity("Models.Entities.TransactionsEntity", b =>
                {
                    b.Property<Guid>("Transaction_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Transaction_Id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OperationTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Transaction_Id");

                    b.HasIndex("OperationTypeID");

                    b.ToTable("transactions", (string)null);

                    b.HasData(
                        new
                        {
                            Transaction_Id = new Guid("32a3009f-f23e-4d72-85b6-bf5b87361294"),
                            Amount = 100.00m,
                            DateTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Income from sales",
                            OperationTypeID = new Guid("551e0ac4-8fba-4342-ab69-9a74c33f8639")
                        },
                        new
                        {
                            Transaction_Id = new Guid("e28b528d-20cc-47a1-8692-8570b35b05cf"),
                            Amount = 50.00m,
                            DateTime = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Office supplies",
                            OperationTypeID = new Guid("3eab599a-ff06-4818-828e-42d49f12405a")
                        },
                        new
                        {
                            Transaction_Id = new Guid("d65ab685-3a61-4a76-ab81-896cec734c98"),
                            Amount = 200.00m,
                            DateTime = new DateTime(2024, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consulting services",
                            OperationTypeID = new Guid("551e0ac4-8fba-4342-ab69-9a74c33f8639")
                        },
                        new
                        {
                            Transaction_Id = new Guid("fe6d52af-c390-4438-a7d5-e58470fd1b85"),
                            Amount = 75.00m,
                            DateTime = new DateTime(2024, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Utility bill",
                            OperationTypeID = new Guid("3eab599a-ff06-4818-828e-42d49f12405a")
                        },
                        new
                        {
                            Transaction_Id = new Guid("4d12e83f-ad37-4b68-9391-9363578d5337"),
                            Amount = 150.00m,
                            DateTime = new DateTime(2024, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Freelance work",
                            OperationTypeID = new Guid("551e0ac4-8fba-4342-ab69-9a74c33f8639")
                        },
                        new
                        {
                            Transaction_Id = new Guid("db9577db-8eea-42e2-8c39-42ac379fb981"),
                            Amount = 100.00m,
                            DateTime = new DateTime(2024, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Travel expenses",
                            OperationTypeID = new Guid("3eab599a-ff06-4818-828e-42d49f12405a")
                        },
                        new
                        {
                            Transaction_Id = new Guid("1267e377-192b-49a1-97ea-0eb276b84187"),
                            Amount = 300.00m,
                            DateTime = new DateTime(2024, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Income from investments",
                            OperationTypeID = new Guid("551e0ac4-8fba-4342-ab69-9a74c33f8639")
                        },
                        new
                        {
                            Transaction_Id = new Guid("9fcc66c0-6fa4-4d05-adf9-017f297bea58"),
                            Amount = 125.00m,
                            DateTime = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Marketing expenses",
                            OperationTypeID = new Guid("3eab599a-ff06-4818-828e-42d49f12405a")
                        });
                });

            modelBuilder.Entity("Models.Entities.TransactionsEntity", b =>
                {
                    b.HasOne("Models.Entities.OperationTypeEntity", "OperationType")
                        .WithMany("transactions")
                        .HasForeignKey("OperationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationType");
                });

            modelBuilder.Entity("Models.Entities.OperationTypeEntity", b =>
                {
                    b.Navigation("transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
